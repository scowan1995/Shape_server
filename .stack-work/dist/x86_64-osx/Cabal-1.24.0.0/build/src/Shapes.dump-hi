
==================== FINAL INTERFACE ====================
2016-11-22 14:21:32.576748 UTC

interface funcProj-0.1.0.0-7s6aX0jPQkMFnqGLbVy140:Shapes 8001
  interface hash: fd1cc2adf9eb7637eba00e45044b5d25
  ABI hash: 77a4ca4eae573bbc3172b682036f2198
  export-list hash: 6bee069444efe415cc368721e838ec07
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: db082111cc32dd58ed548dcc273abe68
  sig of: Nothing
  used TH splices: False
  where
exports:
  Shapes.<+>
  Shapes.circle
  Shapes.convert
  Shapes.empty
  Shapes.getX
  Shapes.getY
  Shapes.identity
  Shapes.point
  Shapes.rotate
  Shapes.scale
  Shapes.square
  Shapes.translate
  Shapes.Drawing
  Shapes.Point
  Shapes.Shape
  Shapes.Transform
  Shapes.Vector
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-markup-0.7.1.0@blaze-markup-0.7.1.0-5a5pBG0fO8kJX4ke3K7j3D
                      blaze-svg-0.3.6@blaze-svg-0.3.6-KnzXaminLUoIWcRwpCsUT
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  blaze-markup-0.7.1.0@blaze-markup-0.7.1.0-5a5pBG0fO8kJX4ke3K7j3D:Text.Blaze.Internal 5703aea7514040e33566fa4563f428e8
import  -/  blaze-svg-0.3.6@blaze-svg-0.3.6-KnzXaminLUoIWcRwpCsUT:Text.Blaze.Svg.Internal def120b37bdb6b39ddcdaaf5ec42c66f
import  -/  blaze-svg-0.3.6@blaze-svg-0.3.6-KnzXaminLUoIWcRwpCsUT:Text.Blaze.Svg.Renderer.String 571d2a19150637ef54f8faddc10240e0
import  -/  blaze-svg-0.3.6@blaze-svg-0.3.6-KnzXaminLUoIWcRwpCsUT:Text.Blaze.Svg11 cedaa4e3f369b220a51c0f9beb20582b
import  -/  blaze-svg-0.3.6@blaze-svg-0.3.6-KnzXaminLUoIWcRwpCsUT:Text.Blaze.Svg11.Attributes 76b412d60adc8aee1c1b2ed3b9a4d6cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
c8e67f592a484b979c0917618b1598b0
  $fReadShape :: GHC.Read.Read Shapes.Shape
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Shape
                  Shapes.$fReadShape_$creadsPrec
                  Shapes.$fReadShape_$creadList
                  Shapes.$fReadShape_$creadPrec
                  Shapes.$fReadShape_$creadListPrec -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Shapes.Shape] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Shapes.Shape] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Shapes.Shape
                   Shapes.$fReadShape2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Shape>_R))
                   @ b
                   eta1) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
  {- Strictness: m,
     Unfolding: ((Shapes.$fReadShape12,
                  Shapes.$fReadShape11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Shapes.Shape>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))))) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 eta Shapes.Circle) -}
2d7c025ee59ba53c4e82a79ddc384405
  $fReadShape12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Circle"#) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
  {- Strictness: m,
     Unfolding: ((Shapes.$fReadShape15,
                  Shapes.$fReadShape14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Shapes.Shape>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))))) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 eta Shapes.Empty) -}
5dd3e19e8bad1b87da0b8b2fbfd4ae2e
  $fReadShape15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty"#) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape16 :: Text.ParserCombinators.ReadP.P [Shapes.Shape]
  {- Unfolding: (GHC.Read.$wlist
                   @ Shapes.Shape
                   Shapes.$fReadShape2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Shape>_R))
                   @ [Shapes.Shape]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Shapes.Shape])) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Shapes.Shape
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Shapes.Shape
                   Shapes.$fReadShape3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Shapes.Shape>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Shapes.Shape>_R)))) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ Shapes.Shape
                   Shapes.$fReadShape4
                   eta
                   @ b
                   eta1) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
                   Shapes.$fReadShape13
                   Shapes.$fReadShape5) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
                   Shapes.$fReadShape10
                   Shapes.$fReadShape6) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
                   Shapes.$fReadShape7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape))) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
  {- Strictness: m,
     Unfolding: ((Shapes.$fReadShape9,
                  Shapes.$fReadShape8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Shapes.Shape>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))))) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 eta Shapes.Square) -}
3574b20743a784a7381b2f5feddb73f6
  $fReadShape9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Square"#) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Shapes.Shape]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Shapes.Shape]
                   Shapes.$fReadShape16) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Shapes.Shape]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadShape1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Shapes.Shape]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Shapes.Shape]>_R))) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadShape2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Shapes.Shape>_R)) -}
c8e67f592a484b979c0917618b1598b0
  $fReadShape_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Shapes.Shape
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Shapes.Shape
                   ((GHC.Read.$fReadDouble10
                       @ Shapes.Shape
                       Shapes.$fReadShape3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Shapes.Shape>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Shapes.Shape>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Shapes.Shape>_R)
                      @ Shapes.Shape
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Shapes.Shape))) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle :: GHC.Read.Read Shapes.Style
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Style
                  Shapes.$fReadStyle_$creadsPrec
                  Shapes.$fReadStyle_$creadList
                  Shapes.$fReadStyle_$creadPrec
                  Shapes.$fReadStyle_$creadListPrec -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Shapes.Style] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Shapes.Style] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Shapes.Style
                   Shapes.$fReadStyle2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Style>_R))
                   @ b
                   eta1) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Shapes.Style
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Shapes.Style
                   Shapes.$fReadStyle3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Shapes.Style>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Shapes.Style>_R)))) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Style -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle4 :: Text.ParserCombinators.ReadP.P [Shapes.Style]
  {- Unfolding: (GHC.Read.$wlist
                   @ Shapes.Style
                   Shapes.$fReadStyle2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Style>_R))
                   @ [Shapes.Style]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Shapes.Style])) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Shapes.Style]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Shapes.Style]
                   Shapes.$fReadStyle4) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Shapes.Style]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadStyle1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Shapes.Style]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Shapes.Style]>_R))) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Style
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadStyle2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Shapes.Style>_R)) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fReadStyle_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Shapes.Style
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Shapes.Style
                   ((GHC.Read.$fReadDouble10
                       @ Shapes.Style
                       Shapes.$fReadStyle3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Shapes.Style>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Shapes.Style>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Shapes.Style>_R)
                      @ Shapes.Style
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Shapes.Style))) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform :: GHC.Read.Read Shapes.Transform
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Transform
                  Shapes.$fReadTransform_$creadsPrec
                  Shapes.$fReadTransform_$creadList
                  Shapes.$fReadTransform_$creadPrec
                  Shapes.$fReadTransform_$creadListPrec -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Shapes.Transform] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Shapes.Transform] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Shapes.Transform
                   Shapes.$fReadTransform2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Transform>_R))
                   @ b
                   eta1) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Shapes.Transform
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Shapes.Transform
                   Shapes.$fReadTransform3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Shapes.Transform>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Shapes.Transform>_R)))) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Transform -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform4 ::
    Text.ParserCombinators.ReadP.P [Shapes.Transform]
  {- Unfolding: (GHC.Read.$wlist
                   @ Shapes.Transform
                   Shapes.$fReadTransform2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Transform>_R))
                   @ [Shapes.Transform]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Shapes.Transform])) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Shapes.Transform]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Shapes.Transform]
                   Shapes.$fReadTransform4) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Shapes.Transform]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadTransform1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Shapes.Transform]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Shapes.Transform]>_R))) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Transform
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadTransform2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Shapes.Transform>_R)) -}
c1518564a53e5d7061068e6410ddb411
  $fReadTransform_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Shapes.Transform
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Shapes.Transform
                   ((GHC.Read.$fReadDouble10
                       @ Shapes.Transform
                       Shapes.$fReadTransform3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Shapes.Transform>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Shapes.Transform>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Shapes.Transform>_R)
                      @ Shapes.Transform
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Shapes.Transform))) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector :: GHC.Read.Read Shapes.Vector
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Vector
                  Shapes.$fReadVector_$creadsPrec
                  Shapes.$fReadVector_$creadList
                  Shapes.$fReadVector_$creadPrec
                  Shapes.$fReadVector_$creadListPrec -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Shapes.Vector] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Shapes.Vector] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Shapes.Vector
                   Shapes.$fReadVector2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Vector>_R))
                   @ b
                   eta1) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Shapes.Vector
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Shapes.Vector
                   Shapes.$fReadVector3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Shapes.Vector>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Shapes.Vector>_R)))) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Vector -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Shapes.Vector -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Shapes.$w$creadPrec ww1 @ b w1 }) -}
8aa4e8ea2a24222663d5436c6dee86b8
  $fReadVector4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Vector"#) -}
cb7b1d52e4720d0e31c261b5526a2d94
  $fReadVector5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector6 :: Text.ParserCombinators.ReadP.P [Shapes.Vector]
  {- Unfolding: (GHC.Read.$wlist
                   @ Shapes.Vector
                   Shapes.$fReadVector2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Vector>_R))
                   @ [Shapes.Vector]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Shapes.Vector])) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Shapes.Vector]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Shapes.Vector]
                   Shapes.$fReadVector6) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Shapes.Vector]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadVector1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Shapes.Vector]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Shapes.Vector]>_R))) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Vector
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadVector2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Shapes.Vector>_R)) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fReadVector_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Shapes.Vector
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Shapes.Vector
                   ((GHC.Read.$fReadDouble10
                       @ Shapes.Vector
                       Shapes.$fReadVector3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Shapes.Vector>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Shapes.Vector>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Shapes.Vector>_R)
                      @ Shapes.Vector
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Shapes.Vector))) -}
25eef54b8c42d4fce4218b9f3ce39b0e
  $fShowImg :: GHC.Show.Show Shapes.Img
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Img
                  Shapes.$fShowImg_$cshowsPrec
                  Shapes.$fShowImg_$cshow
                  Shapes.$fShowImg_$cshowList -}
25eef54b8c42d4fce4218b9f3ce39b0e
  $fShowImg1 :: Shapes.Img -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Shapes.Img) ->
                 case w of ww { Shapes.Img ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Shapes.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
25eef54b8c42d4fce4218b9f3ce39b0e
  $fShowImg_$cshow :: Shapes.Img -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U,1*U(1*U(U),1*U(U)),1*U(U),1*U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Img) ->
                 Shapes.$fShowImg_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
25eef54b8c42d4fce4218b9f3ce39b0e
  $fShowImg_$cshowList :: [Shapes.Img] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Shapes.Img Shapes.$fShowImg1) -}
25eef54b8c42d4fce4218b9f3ce39b0e
  $fShowImg_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Img -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,1*U(1*U(U),1*U(U)),1*U(U),1*U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Shapes.Img) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Shapes.Img ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Shapes.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
c31c219010052afb9f9b556cd5380f49
  $fShowMatrix :: GHC.Show.Show Shapes.Matrix
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Matrix
                  Shapes.$fShowMatrix_$cshowsPrec
                  Shapes.$fShowMatrix_$cshow
                  Shapes.$fShowMatrix_$cshowList -}
c31c219010052afb9f9b556cd5380f49
  $fShowMatrix1 :: Shapes.Matrix -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Shapes.Matrix) ->
                 case w of ww { Shapes.Matrix ww1 ww2 ->
                 Shapes.$w$cshowsPrec1 0# ww1 ww2 }) -}
df8e5650c29a3908fd3e90a907228d99
  $fShowMatrix2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Matrix "#) -}
f3f2a0007fe64440bc2da51073ccbe98
  $fShowMatrix3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Vector "#) -}
c31c219010052afb9f9b556cd5380f49
  $fShowMatrix_$cshow :: Shapes.Matrix -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Matrix) ->
                 Shapes.$fShowMatrix_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c31c219010052afb9f9b556cd5380f49
  $fShowMatrix_$cshowList :: [Shapes.Matrix] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Matrix
                   Shapes.$fShowMatrix1) -}
c31c219010052afb9f9b556cd5380f49
  $fShowMatrix_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Matrix -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Shapes.Matrix) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Shapes.Matrix ww3 ww4 ->
                 Shapes.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
c8e67f592a484b979c0917618b1598b0
  $fShowShape :: GHC.Show.Show Shapes.Shape
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Shape
                  Shapes.$fShowShape_$cshowsPrec
                  Shapes.$fShowShape_$cshow
                  Shapes.$fShowShape_$cshowList -}
c8e67f592a484b979c0917618b1598b0
  $fShowShape_$cshow :: Shapes.Shape -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Shape) ->
                 case x of wild {
                   Shapes.Empty -> Shapes.$fReadShape15
                   Shapes.Circle -> Shapes.$fReadShape12
                   Shapes.Square -> Shapes.$fReadShape9 }) -}
c8e67f592a484b979c0917618b1598b0
  $fShowShape_$cshowList :: [Shapes.Shape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Shape
                   Shapes.$w$cshowsPrec3) -}
c8e67f592a484b979c0917618b1598b0
  $fShowShape_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Shape -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Shapes.Shape)
                   (w2 :: GHC.Base.String) ->
                 Shapes.$w$cshowsPrec3 w1 w2) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fShowStyle :: GHC.Show.Show Shapes.Style
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Style
                  Shapes.$fShowStyle_$cshowsPrec
                  Shapes.$fShowStyle_$cshow
                  Shapes.$fShowStyle_$cshowList -}
d259ba933f7cb3b2c0a7f4341313f966
  $fShowStyle1 :: Shapes.Style -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Shapes.$fShowStyle_$cshowsPrec Shapes.$fShowStyle2) -}
ea0ba49aa9280ba4409c030719899ab3
  $fShowStyle2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8ab2320fc529df66f717fa03c10b0b91
  $fShowStyle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FillColour "#) -}
f387b4cd6ffede52d0f16a49293e22fb
  $fShowStyle4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StrokeColour "#) -}
fe5c9d8589f115f7bd756cf735a139b8
  $fShowStyle5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StrokeWidth "#) -}
3aaf56e8f1c5090496d5f4c46cbd89be
  $fShowStyle6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "None"#) -}
5bbcd3d54668def1d5056af075eab4eb
  $fShowStyle7 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fShowStyle_$cshow :: Shapes.Style -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Shapes.Style) ->
                 case x of wild {
                   Shapes.None -> Shapes.$fShowStyle6
                   Shapes.StrokeWidth b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowStyle5
                        (case GHC.Show.$w$cshowsPrec3
                                11#
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                   Shapes.StrokeColour b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowStyle4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 Shapes.$fShowStyle7))
                   Shapes.FillColour b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowStyle3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows8
                           (GHC.Show.showLitString b1 Shapes.$fShowStyle7)) }) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fShowStyle_$cshowList :: [Shapes.Style] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Style
                   Shapes.$fShowStyle1) -}
d259ba933f7cb3b2c0a7f4341313f966
  $fShowStyle_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Style -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Shapes.Style)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Shapes.None -> GHC.Base.++ @ GHC.Types.Char Shapes.$fShowStyle6 eta
                   Shapes.StrokeWidth b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Shapes.$fShowStyle5
                             (case GHC.Show.$w$cshowsPrec3 11# b1 eta of ww2 { (#,#) ww3 ww4 ->
                              GHC.Types.: @ GHC.Types.Char ww3 ww4 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Shapes.$fShowStyle5
                                (case GHC.Show.$w$cshowsPrec3
                                        11#
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows6
                                           eta) of ww2 { (#,#) ww3 ww4 ->
                                 GHC.Types.: @ GHC.Types.Char ww3 ww4 })) } }
                   Shapes.StrokeColour b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Shapes.$fShowStyle4
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Shapes.$fShowStyle4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))))) } }
                   Shapes.FillColour b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Shapes.$fShowStyle3
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Shapes.$fShowStyle3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows8
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            eta))))) } } }) -}
c1518564a53e5d7061068e6410ddb411
  $fShowTransform :: GHC.Show.Show Shapes.Transform
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Transform
                  Shapes.$fShowTransform_$cshowsPrec
                  Shapes.$fShowTransform_$cshow
                  Shapes.$fShowTransform_$cshowList -}
c1518564a53e5d7061068e6410ddb411
  $fShowTransform1 :: Shapes.Transform -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Shapes.$fShowTransform_$cshowsPrec
                   Shapes.$fShowStyle2) -}
c1518564a53e5d7061068e6410ddb411
  $fShowTransform_$cshow :: Shapes.Transform -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Transform) ->
                 Shapes.$fShowTransform_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c1518564a53e5d7061068e6410ddb411
  $fShowTransform_$cshowList :: [Shapes.Transform] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Transform
                   Shapes.$fShowTransform1) -}
c1518564a53e5d7061068e6410ddb411
  $fShowTransform_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Transform -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
5a2d361c65f683e453ff3c738c41e9b1
  $fShowVector :: GHC.Show.Show Shapes.Vector
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Vector
                  Shapes.$fShowVector_$cshowsPrec
                  Shapes.$fShowVector_$cshow
                  Shapes.$fShowVector_$cshowList -}
5a2d361c65f683e453ff3c738c41e9b1
  $fShowVector1 :: Shapes.Vector -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Shapes.Vector) ->
                 case w of ww { Shapes.Vector ww1 ww2 ->
                 Shapes.$w$cshowsPrec2 0# ww1 ww2 }) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fShowVector_$cshow :: Shapes.Vector -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Vector) ->
                 Shapes.$fShowVector_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fShowVector_$cshowList :: [Shapes.Vector] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Vector
                   Shapes.$fShowVector1) -}
5a2d361c65f683e453ff3c738c41e9b1
  $fShowVector_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Vector -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Shapes.Vector) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Shapes.Vector ww3 ww4 ->
                 Shapes.$w$cshowsPrec2 ww1 ww3 ww4 } }) -}
3f517ccdde3ac584fe8298c44192719c
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13014986759055596778##
                   3018898978336677870##
                   Shapes.$trModule
                   Shapes.$tc'Circle1) -}
5cb279cd71e1a3d9847b80b90b640796
  $tc'Circle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Circle"#) -}
be98ebd6c3f8f51db077080154a5db96
  $tc'Compose :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8326815134768224945##
                   5087974724295382996##
                   Shapes.$trModule
                   Shapes.$tc'Compose1) -}
0d261e1e0228ae7302b72f4a10050423
  $tc'Compose1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Compose"#) -}
d533a9560d1c82123f826ecf47219c20
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11112456556803277530##
                   11344330421534990180##
                   Shapes.$trModule
                   Shapes.$tc'Empty1) -}
37385ad1faae0edec36651623e358384
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
988093fbdee614af09a60e6bf9e05c2b
  $tc'FillColour :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16877631309956153593##
                   4511114606856327066##
                   Shapes.$trModule
                   Shapes.$tc'FillColour1) -}
9e4ef602cec14a576bcd5991ea20e420
  $tc'FillColour1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FillColour"#) -}
d8e1acc8fec9a2552c0e3be7336a0dce
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3145972498312863324##
                   2361899161582491874##
                   Shapes.$trModule
                   Shapes.$tc'Identity1) -}
c8cc15551972eb49577ef02c61bb1905
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
25937ff9c041c3c5124606836cd237aa
  $tc'Img :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5780389419120589946##
                   5450010735601297397##
                   Shapes.$trModule
                   Shapes.$tc'Img1) -}
9378b9dc495d713891127c854a3677c4
  $tc'Img1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Img"#) -}
970592a51478bdd3f2274a509bac55e3
  $tc'Matrix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   485791166172571340##
                   15124339251449317420##
                   Shapes.$trModule
                   Shapes.$tc'Matrix1) -}
86de6fc59df5393ba703d2be7cbc9689
  $tc'Matrix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Matrix"#) -}
00557e97b992dcf928eda739f034e683
  $tc'None :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9155531900880214781##
                   16594782399664233917##
                   Shapes.$trModule
                   Shapes.$tc'None1) -}
b87c82c81df80632fd363b6882fd4029
  $tc'None1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'None"#) -}
1980e2b973d2aab454cd4279fc6ccd46
  $tc'Rotate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5922241921917543580##
                   2292029144371555188##
                   Shapes.$trModule
                   Shapes.$tc'Rotate1) -}
1bc8f39a33370036421018d49c141c08
  $tc'Rotate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rotate"#) -}
c16d5d560bca6304b209015cddeae0f7
  $tc'Scale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4793681170315294876##
                   3047437235077251162##
                   Shapes.$trModule
                   Shapes.$tc'Scale1) -}
e4bb9d9d1caf4ecefdebd477aba64fad
  $tc'Scale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scale"#) -}
076cf35690f6f593c5dad4e00e51b5d4
  $tc'Square :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8768158063127930962##
                   13952507194103504306##
                   Shapes.$trModule
                   Shapes.$tc'Square1) -}
181fa9e65a28a03ed9f31789d8f5b5b1
  $tc'Square1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Square"#) -}
bfdaa82e4bd02bf3dac21aef3215e69f
  $tc'StrokeColour :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7836668467727138472##
                   3942870792499521012##
                   Shapes.$trModule
                   Shapes.$tc'StrokeColour1) -}
9743b16d1ce77973df418ab073dac82d
  $tc'StrokeColour1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StrokeColour"#) -}
2a1bed801128a8b1e4cf280ba8014c2b
  $tc'StrokeWidth :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   434661050437842951##
                   8664099658292006495##
                   Shapes.$trModule
                   Shapes.$tc'StrokeWidth1) -}
b32d6ca2677626ab4f13f78f658ba2cc
  $tc'StrokeWidth1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StrokeWidth"#) -}
0fd4f9922a317affe047dd2150c167b0
  $tc'Translate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5580357225208543943##
                   15075161051516988704##
                   Shapes.$trModule
                   Shapes.$tc'Translate1) -}
48832659b7472a8be595a9e858bde88b
  $tc'Translate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Translate"#) -}
10f50b20e38a480eed2093517ffc5199
  $tc'Vector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2802282110893268382##
                   2612449935562359770##
                   Shapes.$trModule
                   Shapes.$tc'Vector1) -}
9e19858a71d316d3986b4f68a998604d
  $tc'Vector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vector"#) -}
27f879139a27a9b54ff78b3017db63ed
  $tcImg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15465843548970768245##
                   3774560810211161761##
                   Shapes.$trModule
                   Shapes.$tcImg1) -}
f4462fccd4077a7c019c1f33d5720130
  $tcImg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Img"#) -}
77f6e4dc21135921a85df7de88bfffb5
  $tcMatrix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8101242472283887794##
                   7038047973144212023##
                   Shapes.$trModule
                   Shapes.$tcMatrix1) -}
4ddc2326072849d425ceb00d2d6a07af
  $tcMatrix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Matrix"#) -}
01e44b0e7165f306a09559a4c07f3ecd
  $tcShape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14583892356006615774##
                   5248045033373736926##
                   Shapes.$trModule
                   Shapes.$tcShape1) -}
b586270143550df12ce734cf49a49d52
  $tcShape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shape"#) -}
057626548fb684591fc7469cde199c0c
  $tcStyle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10368108144430807892##
                   15579038441699074054##
                   Shapes.$trModule
                   Shapes.$tcStyle1) -}
b4817fcc24dd31b5b30b145f0b79e06a
  $tcStyle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Style"#) -}
44bcdd1d3169e065d45f6585ea6d0000
  $tcTransform :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12023703772968281135##
                   10984912314021603394##
                   Shapes.$trModule
                   Shapes.$tcTransform1) -}
b60d0ba254cf16027e6cf780eef3af84
  $tcTransform1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transform"#) -}
b5f5e7f0eee93ed05021acfdf95e2824
  $tcVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14138719732484472755##
                   15517167471034678947##
                   Shapes.$trModule
                   Shapes.$tcVector1) -}
730ed52f0b489f848eb91c24406fa698
  $tcVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vector"#) -}
eb3418de366b6ad641e245bde5c9ce9a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Shapes.$trModule2
                   Shapes.$trModule1) -}
d3dd0db2001c0df27703d72c358c4a58
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shapes"#) -}
f8fb9a4fdd369a8cc3fbfa1d53601fa2
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "funcProj-0.1.0.0-7s6aX0jPQkMFnqGLbVy140"#) -}
5a2d361c65f683e453ff3c738c41e9b1
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Shapes.Vector -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Shapes.Vector -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl80 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl81 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble9
                                 GHC.Read.$fReadDouble_$sconvertFrac
                                 Shapes.$fReadVector5)
                                `cast`
                              (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Double>_R)
                                @ b
                                (\ (a1 :: GHC.Types.Double) ->
                                 (GHC.Read.$fReadDouble9
                                    GHC.Read.$fReadDouble_$sconvertFrac
                                    Shapes.$fReadVector5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Double>_R)
                                   @ b
                                   (\ (a2 :: GHC.Types.Double) -> w (Shapes.Vector a1 a2)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Shapes.$fReadVector4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl81 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                        = \ (w4 :: ()) -> lvl80
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
e55815d9478d182b6d811d9eac759847
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Shapes.Shape
    -> Shapes.Vector
    -> GHC.Types.Double
    -> Shapes.Transform
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U><L,1*U(1*U(U),1*U(U))><L,1*U(U)><L,1*U><L,U><L,U><L,U>,
     Inline: [0] -}
08d4c6d2f8e42136fb549d63d96d58f6
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Shapes.Vector -> Shapes.Vector -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Shapes.Vector)
                   (ww2 :: Shapes.Vector) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Shapes.Vector ww4 ww5 ->
                     Shapes.$w$cshowsPrec2 11# ww4 ww5 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Shapes.Vector ww4 ww5 ->
                     Shapes.$w$cshowsPrec2 11# ww4 ww5 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowMatrix2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Shapes.$fShowMatrix2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))))) }) -}
5af2ebd56cf8163116a9ebd9821b8379
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Types.Double -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Shapes.$fReadVector5
                       ww4 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Shapes.$fReadVector5
                       ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Shapes.$fShowMatrix3
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Shapes.$fShowMatrix3
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))))) }) -}
c8e67f592a484b979c0917618b1598b0
  $w$cshowsPrec3 ::
    Shapes.Shape -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Shapes.Shape) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Shapes.Empty
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fReadShape15 w1
                   Shapes.Circle
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fReadShape12 w1
                   Shapes.Square
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fReadShape9 w1 }) -}
47d67f043a039a1cfb87f0896d3b5de1
  $wapplyStyle ::
    [Shapes.Style]
    -> Shapes.Shape
    -> Shapes.Vector
    -> GHC.Types.Double
    -> Shapes.Transform
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> (# Shapes.Shape, Shapes.Vector, GHC.Types.Double,
          Shapes.Transform, GHC.Base.String, GHC.Integer.Type.Integer,
          GHC.Base.String #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c4ca6f9da10271319f9db9931be5a57f
  $wapplyTransforms ::
    Shapes.Transform
    -> Shapes.Shape
    -> Shapes.Vector
    -> GHC.Types.Double
    -> Shapes.Transform
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> (# Shapes.Shape, Shapes.Vector, GHC.Types.Double,
          Shapes.Transform, GHC.Base.String, GHC.Integer.Type.Integer,
          GHC.Base.String #)
  {- Arity: 8,
     Strictness: <S,1*U><L,U><L,U(U(U),U(U))><L,U(U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
1e1cd0c0c152faf64f2e5b5a96352ff5
  (<+>) :: Shapes.Transform -> Shapes.Transform -> Shapes.Transform
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (0, True, True) Shapes.Compose -}
9b0f7a381f090a1b9883608f00510b3b
  type Drawing = [(Shapes.Transform, Shapes.Shape, [Shapes.Style])]
25eef54b8c42d4fce4218b9f3ce39b0e
  data Img
    = Img {shape :: Shapes.Shape,
           position :: Shapes.Vector,
           size :: GHC.Types.Double,
           rotation :: Shapes.Transform,
           strokeColor :: GHC.Base.String,
           strokeWidth :: GHC.Integer.Type.Integer,
           fillColor :: GHC.Base.String}
c31c219010052afb9f9b556cd5380f49
  data Matrix = Matrix Shapes.Vector Shapes.Vector
7bc4da46a24ad53f048e9a77a56cb8e3
  type Point = Shapes.Vector
c8e67f592a484b979c0917618b1598b0
  data Shape = Empty | Circle | Square
d259ba933f7cb3b2c0a7f4341313f966
  data Style
    = None
    | StrokeWidth GHC.Integer.Type.Integer
    | StrokeColour GHC.Base.String
    | FillColour GHC.Base.String
c1518564a53e5d7061068e6410ddb411
  data Transform
    = Identity
    | Translate Shapes.Vector
    | Scale Shapes.Vector
    | Compose Shapes.Transform Shapes.Transform
    | Rotate GHC.Types.Double
5a2d361c65f683e453ff3c738c41e9b1
  data Vector = Vector GHC.Types.Double GHC.Types.Double
5a6688bca58eea285e591ea7ad92cd6a
  circle :: Shapes.Shape
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Circle -}
e34a09e6a97d4a05f2298fd335399d48
  convert :: Shapes.Drawing -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Shapes.Drawing) ->
                 Shapes.convert_go1
                   @ ()
                   (GHC.Base.id @ GHC.Base.String)
                   (Text.Blaze.Internal.AddAttribute
                      @ ()
                      Shapes.convert129
                      Shapes.convert125
                      Shapes.convert123
                      (Text.Blaze.Internal.Append
                         @ ()
                         @ ()
                         @ ()
                         Text.Blaze.Svg11.docType
                         (Text.Blaze.Internal.AddAttribute
                            @ ()
                            Shapes.convert119
                            Shapes.convert115
                            Shapes.convert113
                            (Text.Blaze.Internal.AddAttribute
                               @ ()
                               Shapes.convert109
                               Shapes.convert105
                               Shapes.convert103
                               (Text.Blaze.Internal.Parent
                                  @ ()
                                  @ ()
                                  Shapes.convert99
                                  Shapes.convert95
                                  Shapes.convert91
                                  (Shapes.convert_go
                                     (GHC.Base.map
                                        @ (Shapes.Transform, Shapes.Shape, [Shapes.Style])
                                        @ (Text.Blaze.Internal.MarkupM ())
                                        Shapes.convert1
                                        ds)))))))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1c352509ad3e289996fcca24bb68bb10
  convert1 ::
    (Shapes.Transform, Shapes.Shape, [Shapes.Style])
    -> Text.Blaze.Svg.Internal.Svg
  {- Arity: 1,
     Unfolding: (\ (x :: (Shapes.Transform, Shapes.Shape,
                          [Shapes.Style])) ->
                 case x of wild { (,,) t shape1 styles ->
                 case Shapes.$wapplyTransforms
                        t
                        Shapes.Circle
                        Shapes.convert89
                        Shapes.convert88
                        Shapes.convert85
                        Shapes.convert84
                        Shapes.convert83
                        Shapes.convert84 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Shapes.$wapplyStyle
                        styles
                        shape1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7 of ww8 { (#,,,,,,#) ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww9 of wild1 {
                   Shapes.Empty -> Shapes.convert82
                   Shapes.Circle
                   -> case ww10 of wild2 { Shapes.Vector px py ->
                      Text.Blaze.Internal.AddAttribute
                        @ ()
                        Shapes.convert78
                        Shapes.convert74
                        (Text.Blaze.Internal.String ww15)
                        (Text.Blaze.Internal.AddAttribute
                           @ ()
                           Shapes.convert70
                           Shapes.convert66
                           (Text.Blaze.Internal.String ww13)
                           (Text.Blaze.Internal.AddAttribute
                              @ ()
                              Shapes.convert62
                              Shapes.convert58
                              (Text.Blaze.Internal.String (GHC.Show.$fShowInteger_$cshow ww14))
                              (Text.Blaze.Internal.AddAttribute
                                 @ ()
                                 Shapes.convert54
                                 Shapes.convert50
                                 (Text.Blaze.Internal.String
                                    (case ww11 of wild3 { GHC.Types.D# x1 ->
                                     GHC.Float.$w$sshowSignedFloat
                                       GHC.Float.$fShowDouble_$sshowFloat
                                       GHC.Show.shows22
                                       (GHC.Prim./## x1 2.0##)
                                       (GHC.Types.[] @ GHC.Types.Char) }))
                                 (Text.Blaze.Internal.AddAttribute
                                    @ ()
                                    Shapes.convert46
                                    Shapes.convert42
                                    (Text.Blaze.Internal.String (GHC.Float.$fShowDouble_$cshow py))
                                    (Text.Blaze.Internal.AddAttribute
                                       @ ()
                                       Shapes.convert38
                                       Shapes.convert34
                                       (Text.Blaze.Internal.String
                                          (GHC.Float.$fShowDouble_$cshow px))
                                       Text.Blaze.Svg11.circle))))) }
                   Shapes.Square
                   -> case ww10 of wild2 { Shapes.Vector px py ->
                      Text.Blaze.Internal.AddAttribute
                        @ ()
                        Shapes.convert78
                        Shapes.convert74
                        (Text.Blaze.Internal.String ww15)
                        (Text.Blaze.Internal.AddAttribute
                           @ ()
                           Shapes.convert70
                           Shapes.convert66
                           (Text.Blaze.Internal.String ww13)
                           (Text.Blaze.Internal.AddAttribute
                              @ ()
                              Shapes.convert62
                              Shapes.convert58
                              (Text.Blaze.Internal.String (GHC.Show.$fShowInteger_$cshow ww14))
                              (Text.Blaze.Internal.AddAttribute
                                 @ ()
                                 Shapes.convert30
                                 Shapes.convert26
                                 (Text.Blaze.Internal.String (GHC.Float.$fShowDouble_$cshow ww11))
                                 (Text.Blaze.Internal.AddAttribute
                                    @ ()
                                    Shapes.convert22
                                    Shapes.convert18
                                    (Text.Blaze.Internal.String
                                       (GHC.Float.$fShowDouble_$cshow ww11))
                                    (Text.Blaze.Internal.AddAttribute
                                       @ ()
                                       Shapes.convert14
                                       Shapes.convert10
                                       (Text.Blaze.Internal.String
                                          (GHC.Float.$fShowDouble_$cshow py))
                                       (Text.Blaze.Internal.AddAttribute
                                          @ ()
                                          Shapes.convert6
                                          Shapes.convert2
                                          (Text.Blaze.Internal.String
                                             (GHC.Float.$fShowDouble_$cshow px))
                                          Text.Blaze.Svg11.rect)))))) } } } } }) -}
3bbcfcbe098a4278d6fe4aeff3c61c04
  convert10 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert13
                   Shapes.convert12
                   Shapes.convert_t3) -}
7d4f15f936016ab15f2b4665bcbc01aa
  convert100 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w22
                   0#
                   ipv }) -}
61066bd62e81b40fc7f5b573e0133ddf
  convert101 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t23 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d10c9ac53dbae4485c622a835bcf07f9
  convert102 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w22) -}
5415fd8cb6aa9bdf3ca2a5b36f38bfb0
  convert103 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.String Shapes.convert104) -}
8b44b795b671b2fbde74a5de08476527
  convert104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "http://www.w3.org/2000/svg"#) -}
0a76d1f7247aeea54343497bbec0c92c
  convert105 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert108
                   Shapes.convert107
                   Shapes.convert_t24) -}
dfee43f2d7888e5601f118d95abc62c5
  convert106 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w23
                   0#
                   ipv }) -}
e5c5015d4b8167d7235c23ea4d880775
  convert107 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t24 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
0a1fef87cdf220d1f355f322206740a5
  convert108 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w23) -}
29480c2cab0ae115ea354b0095b440df
  convert109 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert112
                   Shapes.convert111
                   Shapes.convert_t25) -}
61ac97f338b321e5a1e013bb23b6341b
  convert11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w2
                   0#
                   ipv }) -}
e8c541641f91ef8d0fb30a985bfb6911
  convert110 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w24
                   0#
                   ipv }) -}
d0fb048c79dc8dfb1da976edf8169abc
  convert111 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t25 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3f0c834b13951c2c78d042d7bad0df56
  convert112 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w24) -}
7e1163e934bcdd91226e550188a0ccf8
  convert113 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.String Shapes.convert114) -}
8731c846297d1d20764279b6a9ea7bbf
  convert114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "http://www.w3.org/1999/xlink"#) -}
cafb3953c523760377bf9b2ff45f8462
  convert115 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert118
                   Shapes.convert117
                   Shapes.convert_t26) -}
90d280915e9641f976e91976f19ca2ac
  convert116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w25
                   0#
                   ipv }) -}
b9819bbe36180517475ac291f499b0fe
  convert117 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t26 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
279be23f6cef8df258910ed49725931f
  convert118 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w25) -}
a814dad0fa669fe8ca23f4c4b59b7004
  convert119 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert122
                   Shapes.convert121
                   Shapes.convert_t27) -}
33bced263439b74b7c062554f61667c8
  convert12 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
6283386cf5c3326c8b5b75065ded2cba
  convert120 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w26
                   0#
                   ipv }) -}
1b1dbefddee11338e5f1e9ad68829fd0
  convert121 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t27 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
fded0a7c063f28f3eb81c38db9c434d6
  convert122 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w26) -}
5289bbaacbb5dd737c510851ba9de5a2
  convert123 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m2,
     Unfolding: (Text.Blaze.Internal.String Shapes.convert124) -}
5adbf633c845f44d86f201b3504914ae
  convert124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "0 0 400 400"#) -}
c631b530ddcaf8f0155be49b7575c348
  convert125 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert128
                   Shapes.convert127
                   Shapes.convert_t28) -}
0e9fcb70c7f22183c2b7991ce8553f33
  convert126 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w27
                   0#
                   ipv }) -}
3dec3368f8fda5a4ec258c3f626356a6
  convert127 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t28 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
735b7ee127eb68061ca49f17eecb763d
  convert128 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w27) -}
1736eddf0de93e1612ed13c9ebfa6a97
  convert129 :: Text.Blaze.Internal.StaticString
  {- Strictness: m,
     Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert132
                   Shapes.convert131
                   Shapes.convert_t29) -}
3c3d73a793aeeaf0a6ed0a98f47eccbb
  convert13 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w2) -}
c0bac6b29dcdb5faaf5674c4355c13c0
  convert130 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w28
                   0#
                   ipv }) -}
3c461e55a32f8f68f501eee0f35d8589
  convert131 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t29 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
bc5f345f5662355e989cf8cade671fd8
  convert132 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w28) -}
fa0dd4b02e2daad12f335309d98fab3a
  convert14 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert17
                   Shapes.convert16
                   Shapes.convert_t4) -}
9a624f137a656200619a6ef7a0b23d94
  convert15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w3
                   0#
                   ipv }) -}
7ee0e3aaebe791e4aa94657eab7f8716
  convert16 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
695d90cedea8e147575743a21c8de8cf
  convert17 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w3) -}
66ab57c2c39d53793bedae65a044cf3f
  convert18 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert21
                   Shapes.convert20
                   Shapes.convert_t5) -}
8dde0f05da887947569c905ec43022de
  convert19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w4
                   0#
                   ipv }) -}
d9bcfecfbee4c77de844cdca1d4b9f3d
  convert2 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert5
                   Shapes.convert4
                   Shapes.convert_t1) -}
074bee15da7215b6e163d34a1b9fdf02
  convert20 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4ab1f0c0d1f617c2aea7ef11136c0438
  convert21 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w4) -}
573b29498b6ab0948266511cb029a816
  convert22 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert25
                   Shapes.convert24
                   Shapes.convert_t6) -}
5400d8da665e9f26db444170479609f4
  convert23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w5
                   0#
                   ipv }) -}
f8434dabafe5f8e6b4519c84861c92a7
  convert24 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
b00cea6f0ee585a147ab8fc6c74de601
  convert25 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w5) -}
73e4a202a5a8d63f6bb7fa12349119ed
  convert26 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert29
                   Shapes.convert28
                   Shapes.convert_t7) -}
e65c8baf4bbb347c2518ffacc5a3b76c
  convert27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w6
                   0#
                   ipv }) -}
8d58695a15b7d43d68462ac74c15087a
  convert28 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
cf4655edc59091c1d10774e76cf99469
  convert29 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w6) -}
799c7c5b3dbdda66db2308eb7a0599f2
  convert3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w
                   0#
                   ipv }) -}
19a0e6607325ac1872d296bc56dfc318
  convert30 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert33
                   Shapes.convert32
                   Shapes.convert_t8) -}
b063f1b71a67f0da403cbcad815f175f
  convert31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w7
                   0#
                   ipv }) -}
f528f17e345e2ba5dde31dba7aa5d5a9
  convert32 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
056191d93b0eaf7c9a779a5b1fc659fc
  convert33 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w7) -}
16ebcc78a99c8f1d8751cffd699b9083
  convert34 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert37
                   Shapes.convert36
                   Shapes.convert_t9) -}
a353018f6da4f5c9a9ddeed3d15eef88
  convert35 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w8
                   0#
                   ipv }) -}
a7ef5a45e43b625a5a03534d68700856
  convert36 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f8338b171b79194b59608c75d1592777
  convert37 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w8) -}
30d0b27e48dbc92b2c55d793aa01234d
  convert38 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert41
                   Shapes.convert40
                   Shapes.convert_t10) -}
eff3faeaf3be7396d564e0006d591db1
  convert39 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w9
                   0#
                   ipv }) -}
92ae4c722528bd4cbd648c2950cfd891
  convert4 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
8590ad735b6c7e020840e128cdac0eb8
  convert40 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
ff9426e511c6ad74c121ea0a61178d7a
  convert41 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w9) -}
97a2589ebc3e02e49e1c348c3c65f1ef
  convert42 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert45
                   Shapes.convert44
                   Shapes.convert_t11) -}
2a7104955c5aabcda60998a1a08e7636
  convert43 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w10
                   0#
                   ipv }) -}
8076b723597359169e050abdba00b9a0
  convert44 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t11 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
4d18053478bac96bdd4fdae533ee5897
  convert45 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w10) -}
71f45aff3efb2b1923a4a6e03dbb1e73
  convert46 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert49
                   Shapes.convert48
                   Shapes.convert_t12) -}
cd435818f2560edd0fbb1e0bfe981ebe
  convert47 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w11
                   0#
                   ipv }) -}
27a3020a4d9c1414f243263eb51c709d
  convert48 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t12 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
d0a4f72d232e04c6513590e8937edfb5
  convert49 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w11) -}
3490d2a0b1ccaa344431f4c1e5e17e3a
  convert5 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w) -}
e5836248fd5159490c87321138a5ddec
  convert50 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert53
                   Shapes.convert52
                   Shapes.convert_t13) -}
e509beb2af608a15b95b02b74bac3016
  convert51 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w12
                   0#
                   ipv }) -}
b237fe699f11bda7290d2a9a073e01e5
  convert52 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t13 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
c15afb4d11c087d55330358783b4aed7
  convert53 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w12) -}
21121ad1de64a5c2837bc5953364ae5d
  convert54 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert57
                   Shapes.convert56
                   Shapes.convert_t14) -}
c83cc7f1b238782ab9a3277c572aaeb2
  convert55 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w13
                   0#
                   ipv }) -}
50ba020cc16ebbc2cdde097d603aa8f9
  convert56 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
50381ae276db203a82af61ccb09f6a69
  convert57 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w13) -}
c6aab7f6854448ee34e528d0be5fad9f
  convert58 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert61
                   Shapes.convert60
                   Shapes.convert_t15) -}
ed592c4608c81a84cbd40a481364c3ff
  convert59 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w14
                   0#
                   ipv }) -}
9b88cac3630ac71c3e9ed50363be8759
  convert6 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert9
                   Shapes.convert8
                   Shapes.convert_t2) -}
7fa203178a8aacca7225e8c75a9a415a
  convert60 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
89d6b723ee2cfdd20cdbdea4a1592d3e
  convert61 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w14) -}
6ac53b87b6f5fb8a9e1545b9d4fbb267
  convert62 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert65
                   Shapes.convert64
                   Shapes.convert_t16) -}
15e5517aa92d445942b7ac9476deeb5e
  convert63 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w15
                   0#
                   ipv }) -}
a19da377929a8748fb11ac7061e8884c
  convert64 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
5578c1c079260f1c86e58c4e01f4f74d
  convert65 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w15) -}
0e332923629f99ed9479f52dd9e8fb9c
  convert66 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert69
                   Shapes.convert68
                   Shapes.convert_t17) -}
298e313b33037e2a36f4a24e42905e94
  convert67 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w16
                   0#
                   ipv }) -}
ef1b7d54377af784d480b7048f16bcc2
  convert68 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t17 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
025b27898ce438a7011c75933f179278
  convert69 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w16) -}
108da1d55ec34dd1253fc08cd6b9b22f
  convert7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w1
                   0#
                   ipv }) -}
d38d9a91f974be3c820610b2d1b10f2d
  convert70 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert73
                   Shapes.convert72
                   Shapes.convert_t18) -}
9627beb3dd43ce3fe716fd7ecbed822e
  convert71 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w17
                   0#
                   ipv }) -}
56c7630f48b79cd7b30f0f057640991e
  convert72 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
1f4536a4dc104de8c8358aa0bd8ef74f
  convert73 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w17) -}
21ffad641ef4434aa00d0ff17afd1635
  convert74 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert77
                   Shapes.convert76
                   Shapes.convert_t19) -}
0ecb6a6f4c13062058e27465dcc2a84f
  convert75 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w18
                   0#
                   ipv }) -}
549d8753f6d2f824e438f7894a3a0a37
  convert76 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t19 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
92edb773cbc68f97f079ee723b31901a
  convert77 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w18) -}
6d2f767295ef1e456affff4504a422c0
  convert78 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert81
                   Shapes.convert80
                   Shapes.convert_t20) -}
02a6b3dd6c7d99142a8af0d39d66f1d4
  convert79 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w19
                   0#
                   ipv }) -}
f9e1d83615d39a929730e55bfe128b0b
  convert8 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
f42429f7862fbaeaa53415a6146b106a
  convert80 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t20 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
16e25cbc24ec1604b5cf3dfba2439e42
  convert81 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w19) -}
10e21c509c8f67c17c3ed65bf7b99625
  convert82 :: Text.Blaze.Svg.Internal.Svg
  {- Strictness: x -}
3b1ff28d5f67ce526c49ffdb4d849a31
  convert83 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
5e191f6cc25145ada7594dc7f958f934
  convert84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "black"#) -}
dd3c3934ee64b37f7f1640409a214b64
  convert85 :: Shapes.Transform
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Shapes.Translate Shapes.convert86) -}
89b44db0b70680adf7b8a0cd0209f82d
  convert86 :: Shapes.Vector
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Shapes.Vector Shapes.convert87 Shapes.convert87) -}
50adbeba098a061a8939689a90fe2ef5
  convert87 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
c87253c6bbdabcb93c18db72dbd3acfc
  convert88 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 10.0##) -}
fae08fb1349bef14ce232c0fd6543b8b
  convert89 :: Shapes.Vector
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Shapes.Vector Shapes.convert90 Shapes.convert90) -}
d1ef42e9c77468c624d8c9e51fc214a1
  convert9 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w1) -}
acb5a3206645f6d17137985f87f2d4fd
  convert90 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0##) -}
2a32399d34f083e5b4a0f5d363b54d1a
  convert91 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert94
                   Shapes.convert93
                   Shapes.convert_t21) -}
2f0c4bb9b0fd7d80fa214302de951b0a
  convert92 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w20
                   0#
                   ipv }) -}
aa804f79f1fba42798e73325f0c2c17d
  convert93 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t21 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
3d3f799e718102d987d64c01898e1e01
  convert94 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w20) -}
f5639c25e227ce1734dfd093807b9b8d
  convert95 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert98
                   Shapes.convert97
                   Shapes.convert_t22) -}
078f8000e6f76dc959d27e07492462d1
  convert96 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Text.Blaze.Internal.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Text.Blaze.Internal.$fIsStringStaticString1
                   Shapes.convert_w21
                   0#
                   ipv }) -}
b28f232b77fb1a9eb3d39f81391f3482
  convert97 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Shapes.convert_t22 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
94ffce17fc0389631ca66119c8dd9c7c
  convert98 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++ @ GHC.Types.Char Shapes.convert_w21) -}
d01d4999337e530e9f36f9490065e2c4
  convert99 :: Text.Blaze.Internal.StaticString
  {- Unfolding: (Text.Blaze.Internal.StaticString
                   Shapes.convert102
                   Shapes.convert101
                   Shapes.convert_t23) -}
eb77858f59cfede04519d85eaceaec35
  convert_go ::
    [Text.Blaze.Internal.MarkupM ()] -> Text.Blaze.Internal.MarkupM ()
  {- Arity: 1, Strictness: <S,1*U> -}
08a7f14f4b5748f789a021d82517add4
  convert_go1 ::
    (GHC.Base.String -> GHC.Base.String)
    -> Text.Blaze.Internal.MarkupM b
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,C(U)><S,1*U><L,U>, Inline: NOINLINE -}
06f179e0ebb2338bb91a011b95bed3ab
  convert_t1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert3 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
5d15ebaef7a0a076635bb0741e1dc400
  convert_t10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert39 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
772a7b5313eca1dad268e938aeab65aa
  convert_t11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert43 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
3c559c63f86b4f278f7671188cfd023b
  convert_t12 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert47 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d9a1004ec90c50bf0f9ceee035350ea7
  convert_t13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert51 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ad1e583229a2a1d17a386cb0c0cfa138
  convert_t14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert55 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
796f88525062fb431d5039c6bd72e920
  convert_t15 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert59 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a2128385e473f0c5aa5e2b9988142b97
  convert_t16 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert63 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6230af73a8980caae247892a3e9cc4bc
  convert_t17 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert67 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
00c34daff35d46f4933a2a3a9f65d0ab
  convert_t18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert71 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a7eb6af5017a2497cbc4c55deac5dfa1
  convert_t19 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert75 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e089e225b2d63adaa3a7dc437a567a8b
  convert_t2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert7 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
4c9c75a5cae7270809685dd5b432177e
  convert_t20 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert79 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
887b58e6e53be05ed8036f199735f1bf
  convert_t21 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert92 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
45daf7aa58c1e8efd1f401fb4dd89622
  convert_t22 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert96 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
c599d4706af579915664273c83a26c5c
  convert_t23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert100 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
bce854267f291be6c270c8663f024008
  convert_t24 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert106 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
1de1b25e0b507b21051586b3231c069b
  convert_t25 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert110 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e65fa22f6138cc94dd4f80db1e933d9b
  convert_t26 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert116 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
e974b11f160a154b7d98355a6fad8e97
  convert_t27 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert120 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
71a379d6bf5f4230e2eb4fc544c4783c
  convert_t28 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert126 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d532f0aafcb067f89c42d185ad355907
  convert_t29 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert130 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
066c6f1450839b64977953a6c4ea708a
  convert_t3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert11 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7adabe3161c79ba7d7c6b480782e026f
  convert_t4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert15 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6fb7db92d268c1527f05f80c6289dce9
  convert_t5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert19 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
63bbf12ffe755244077cd721323ae253
  convert_t6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert23 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
fcf9a182ca113e273a75457452032c14
  convert_t7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert27 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6e04abb4069ac56b1be68b5b363d53a5
  convert_t8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert31 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
7467d15f7d0112ae15c19695e19684f6
  convert_t9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Shapes.convert35 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
08aef6e57192372d0e0c0b0bbd583439
  convert_w :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " x=\""#) -}
1553644b8ae3158fe9c426820ba6a0af
  convert_w1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "x"#) -}
62d534e98efb8a1d9876ec9280b6825b
  convert_w10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " cy=\""#) -}
fce723b25008ab4cbde3132f7e7076de
  convert_w11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "cy"#) -}
e467b97107f7750716dd8fd0052511ec
  convert_w12 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " r=\""#) -}
1cc485352d31147edbbc6fbeeceb398b
  convert_w13 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "r"#) -}
08e2d5b29ebe28a37bc8afab20e5ef3c
  convert_w14 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " stroke-width=\""#) -}
68f5cc33d001c936dc9c9177de98abb4
  convert_w15 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "stroke-width"#) -}
570aaf75bc5404874d610bcc213cfebb
  convert_w16 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " stroke=\""#) -}
a90a0f5cc1bbe065fe1cbdd494310772
  convert_w17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "stroke"#) -}
c5dd16e4cd2199cde010d27232b927eb
  convert_w18 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " fill=\""#) -}
30290916014519d35fc717ee8c9384df
  convert_w19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "fill"#) -}
e54303b466fff628cae14149e9aef719
  convert_w2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " y=\""#) -}
a22e5f407efa3d11f19f9c78cd5b61e1
  convert_w20 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "</svg>"#) -}
628d07d59efb408370c162cf7538958f
  convert_w21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "<svg"#) -}
728c542e5845052498cc9a5c4bef190f
  convert_w22 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "svg"#) -}
f018d1e50f9ff18d97525629674da50d
  convert_w23 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " xmlns=\""#) -}
da7ce6491fa3f2078558a268bb6bcab1
  convert_w24 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "xmlns"#) -}
8f921da3850d95631c27dd84d8c6e998
  convert_w25 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " xmlns:xlink=\""#) -}
0019d0a4ea59a60550b2af2cf0728805
  convert_w26 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "xmlns:xlink"#) -}
80d0cd131dcbd4ff030f7f60176e9d4a
  convert_w27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " viewBox=\""#) -}
174a4860afd171986f019820d5be41c8
  convert_w28 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "viewBox"#) -}
f6e1ec9e5d1784315772650a76e49df3
  convert_w3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "y"#) -}
5b29292a5fc9fc43fb844f6764c66b79
  convert_w4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " width=\""#) -}
0782565db4eecebd5a42d114cfbbe595
  convert_w5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "width"#) -}
4c676052a91e32de7544883586370406
  convert_w6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " height=\""#) -}
457c86d30b9156d4c9cf0bebdc8c0746
  convert_w7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "height"#) -}
9998da64aa5b2dcdced7e344f61bf6b2
  convert_w8 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " cx=\""#) -}
33a9c360758544772abd91dbdf6d3d99
  convert_w9 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "cx"#) -}
c22da0758f8dde3f57f8787f3823222b
  empty :: Shapes.Shape
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Empty -}
ef4ebd7442c85d218a485c23dff07698
  fillColor :: Shapes.Img -> GHC.Base.String
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
939361c1f4891205cf2f8e96a8d46b31
  getX :: Shapes.Vector -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Vector) ->
                 case ds of wild { Shapes.Vector x y -> x }) -}
b2275be168e8795aa438c5109c3dba51
  getY :: Shapes.Vector -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Vector) ->
                 case ds of wild { Shapes.Vector x y -> y }) -}
63a435956baebfaed464776ad71f6fef
  identity :: Shapes.Transform
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Identity -}
fc74d91ff409effa28dd840531fcfd21
  point :: GHC.Types.Double -> GHC.Types.Double -> Shapes.Point
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True) Shapes.Vector -}
731e03c50d95c48032de359a8b418068
  position :: Shapes.Img -> Shapes.Vector
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
49a8ee3a81c7f05aceaff3e7410e7a6f
  rotate :: GHC.Types.Double -> Shapes.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m5,
     Unfolding: InlineRule (0, True, True) Shapes.Rotate -}
6e322766493aa124f065395ac83c7bc5
  rotation :: Shapes.Img -> Shapes.Transform
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
91812493873b4197c5f2c493eb7ac006
  scale :: Shapes.Vector -> Shapes.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True) Shapes.Scale -}
3a35cc93f0c5f788a334cda7fd508fb4
  shape :: Shapes.Img -> Shapes.Shape
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
7ad6f77ba11bec4b0a0ab983ca88f92b
  size :: Shapes.Img -> GHC.Types.Double
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
fb0886f0f1c2d827f9d5f6da3a2cfaa9
  square :: Shapes.Shape
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Shapes.Square -}
8f11d75170689093bbad8718c602ebda
  strokeColor :: Shapes.Img -> GHC.Base.String
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
176adf1e0b6971802b493725635f1000
  strokeWidth :: Shapes.Img -> GHC.Integer.Type.Integer
  RecSel Left Shapes.Img
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Shapes.Img) ->
                 case ds of wild { Shapes.Img ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
bf71e46978003639414b08a8b7667b72
  translate :: Shapes.Vector -> Shapes.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True) Shapes.Translate -}
instance GHC.Read.Read [Shapes.Shape] = Shapes.$fReadShape
instance GHC.Read.Read [Shapes.Style] = Shapes.$fReadStyle
instance GHC.Read.Read [Shapes.Transform] = Shapes.$fReadTransform
instance GHC.Read.Read [Shapes.Vector] = Shapes.$fReadVector
instance GHC.Show.Show [Shapes.Img] = Shapes.$fShowImg
instance GHC.Show.Show [Shapes.Matrix] = Shapes.$fShowMatrix
instance GHC.Show.Show [Shapes.Shape] = Shapes.$fShowShape
instance GHC.Show.Show [Shapes.Style] = Shapes.$fShowStyle
instance GHC.Show.Show [Shapes.Transform] = Shapes.$fShowTransform
instance GHC.Show.Show [Shapes.Vector] = Shapes.$fShowVector
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

